/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.3 public/models/646d9dcdc8a5f5bddbfac913.glb -o src/components/Avatar.jsx -r public
*/

import { useAnimations, useFBX, useGLTF } from '@react-three/drei'
import { useFrame } from '@react-three/fiber'
import { useEffect, useRef, useState } from 'react'
import { useStores } from '../data/store/useStore'

const corresponding = {
	A: 'viseme_PP',
	B: 'viseme_kk',
	C: 'viseme_I',
	D: 'viseme_AA',
	E: 'viseme_O',
	F: 'viseme_U',
	G: 'viseme_FF',
	H: 'viseme_TH',
	X: 'viseme_PP',
}

export default function AvatarCanvas(props) {
	const timeToSpeak = useStores(state => state.timeToSpeak)
	const {
		playAudio,
		script,
		headFollow,
		smoothMorphTarget,
		morphTargetSmoothing,
	} = {
		playAudio: timeToSpeak,
		headFollow: true,
		smoothMorphTarget: true,
		morphTargetSmoothing: 0.5,
		script: {
			value: 'welcome',
			options: ['welcome', 'pizzas'],
		},
	}

	useFrame(() => {
		if (!timeToSpeak) {
			setAnimation('Idle')
			return
		}
	})

	useEffect(() => {
		nodes.Wolf3D_Head.morphTargetInfluences[
			nodes.Wolf3D_Head.morphTargetDictionary['viseme_I']
		] = 1
		nodes.Wolf3D_Teeth.morphTargetInfluences[
			nodes.Wolf3D_Teeth.morphTargetDictionary['viseme_I']
		] = 1
		if (timeToSpeak) {
			setAnimation('Greeting')
		} else {
			setAnimation('Idle')
		}
	}, [timeToSpeak])

	const { nodes, materials } = useGLTF('/3dmodels/646d9dcdc8a5f5bddbfac913.glb')
	const { animations: idleAnimation } = useFBX('/animations/Idle.fbx')
	const { animations: angryAnimation } = useFBX('/animations/Angry Gesture.fbx')
	const { animations: greetingAnimation } = useFBX(
		'/animations/Standing Greeting.fbx'
	)

	idleAnimation[0].name = 'Idle'
	angryAnimation[0].name = 'Angry'
	greetingAnimation[0].name = 'Greeting'

	const [animation, setAnimation] = useState('Idle')

	const group = useRef()
	const { actions } = useAnimations(
		[idleAnimation[0], angryAnimation[0], greetingAnimation[0]],
		group
	)

	useEffect(() => {
		actions[animation].reset().fadeIn(0.5).play()
	}, [animation])

	// CODE ADDED AFTER THE TUTORIAL (but learnt in the portfolio tutorial ♥️)
	useFrame(state => {
		if (headFollow) {
			group.current.getObjectByName('Head').lookAt(state.camera.position)
		}
	})

	return (
		<group {...props} dispose={null} ref={group} scale={0.7} rotation-y={2}>
			<primitive object={nodes.Hips} />
			<skinnedMesh
				geometry={nodes.Wolf3D_Body.geometry}
				material={materials.Wolf3D_Body}
				skeleton={nodes.Wolf3D_Body.skeleton}
			/>
			<skinnedMesh
				geometry={nodes.Wolf3D_Outfit_Bottom.geometry}
				material={materials.Wolf3D_Outfit_Bottom}
				skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton}
			/>
			<skinnedMesh
				geometry={nodes.Wolf3D_Outfit_Footwear.geometry}
				material={materials.Wolf3D_Outfit_Footwear}
				skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton}
			/>
			<skinnedMesh
				geometry={nodes.Wolf3D_Outfit_Top.geometry}
				material={materials.Wolf3D_Outfit_Top}
				skeleton={nodes.Wolf3D_Outfit_Top.skeleton}
			/>
			<skinnedMesh
				geometry={nodes.Wolf3D_Hair.geometry}
				material={materials.Wolf3D_Hair}
				skeleton={nodes.Wolf3D_Hair.skeleton}
			/>
			<skinnedMesh
				name='EyeLeft'
				geometry={nodes.EyeLeft.geometry}
				material={materials.Wolf3D_Eye}
				skeleton={nodes.EyeLeft.skeleton}
				morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary}
				morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences}
			/>
			<skinnedMesh
				name='EyeRight'
				geometry={nodes.EyeRight.geometry}
				material={materials.Wolf3D_Eye}
				skeleton={nodes.EyeRight.skeleton}
				morphTargetDictionary={nodes.EyeRight.morphTargetDictionary}
				morphTargetInfluences={nodes.EyeRight.morphTargetInfluences}
			/>
			<skinnedMesh
				name='Wolf3D_Head'
				geometry={nodes.Wolf3D_Head.geometry}
				material={materials.Wolf3D_Skin}
				skeleton={nodes.Wolf3D_Head.skeleton}
				morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary}
				morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences}
			/>
			<skinnedMesh
				name='Wolf3D_Teeth'
				geometry={nodes.Wolf3D_Teeth.geometry}
				material={materials.Wolf3D_Teeth}
				skeleton={nodes.Wolf3D_Teeth.skeleton}
				morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary}
				morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences}
			/>
		</group>
	)
}

useGLTF.preload('/3dmodels/646d9dcdc8a5f5bddbfac913.glb')
